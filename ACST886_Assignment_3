---
title: "ACST886_Assignment 3"
author: "Chieh Cheng"
date: "October 2, 2019"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

##Question 1 
Contruct a profit testing table for this term annuity (conventional business).
Step 1: Input Setting
```{r}
T=3
Annuity<-c()
Annuity[1:3]<-15000*(1+0.0192308)^(0:2)
q<-c()
q[55:57]<-c(0.001046,0.001199,0.001375)
p<-1-q
tp55<-c()
tp55[1:3]<-c(p[55],p[55]*p[56],p[55]*p[56]*p[57])
Premium<-c(40250,0,0)
Ini_Expense<-c(100,0,0)+0.015*Premium
Pay_Expense<-10*(1+0.05)^(1:3)
Earn_i<-0.08
rdr<-0.12
A56_3<-0.889132 ; A57_2<-0.924607
j<-(1+0.06)/(1+0.0192308)-1 ; j=0.04
d<-j/(1+j)
PV<-rep(0,3)
PV[1]<-Annuity[1]*((1-A56_3)/d-1)
PV[2]<-Annuity[2]*((1-A57_2)/d-1)
#Mortality Info
print("Mortality Table")
M<-matrix(c(q[55:57],tp55[1:3]),nrow =3);colnames(M)<-c("q55~q57","1p55~3p55");M
print("Possible Cash Flow Table")
#CF Table
M<-matrix(c(1:3,55:57,Premium,Ini_Expense,Pay_Expense,Annuity,PV),nrow = 3)
colnames(M)<-c("Year t", "Age", "Premium", "Initial Expense", "Annuity Payment Expense", "Annuity Payment", "Policy Value")
M
#ECF Table
EPremium<-Premium*c(1,tp55[1:2])
EIni_Expense<-Ini_Expense*c(1,tp55[1:2])
EPay_Expense<-Pay_Expense*tp55
EAnnuity<-Annuity*tp55
EPV<-PV*tp55 #Expected Policy Value
Interest<-(c(0,EPV[1:2])+EPremium-EIni_Expense)*Earn_i
Change_EPV<-EPV-c(0,EPV[1:2])
ETransfer<-EPremium-EIni_Expense-EPay_Expense-EAnnuity+Interest-Change_EPV

print("Expected Cash Flow Table")
M<-matrix(c(EPremium,EIni_Expense,EPay_Expense,EAnnuity,EPV,Interest,ETransfer),nrow = 3)
colnames(M)<-c("EPremium","EIni_Expense","EPay_Expense","EAnnuity","EPV","Interest","ETransfer")
M
```  
__(a)(i)__  
The profit signature vector is in the "Etransfer" column above.  
__(a)(ii)__  
Net present value of the profit signature: (Using rdr = 12%)
```{r}
v<-1/(1+rdr)
(aii_1<-sum(c(v,v^2,v^3)*ETransfer))
```  
Profit Margin: (Using rdr = 12%)
```{r}
(aii_2<-aii_1/(sum(c(1,v,v^2)*EPremium)))
```  
  
__(b)__  
IRR: The estimated IRR is shown below, which is 50.0167% roughly. The reason why it is so high is due to the pattern of the profit signature. In order to make those bigger positive subsequent transfers worth the same as the abolute value of first year positive transfer, we should obtain heavy discount rate.  
  
```{r}
i=0 ; profit_signature<-ETransfer
NPV<-function(i,profit_signature){
  n<-length(profit_signature)
  v<-(1+i)^-1
  npv<-sum(v^(1:n) * profit_signature)
  return(npv)
}
f<-function(i){NPV(i,ETransfer)}
(IRR<-uniroot(NPV(i,ETransfer),c(0,1))$root)
```  
  
  
##Question2
Contruct a profit testing table for this unit-linked unbundled policy with no insurance.  
  
__Step 1: Initial Settings__
```{r}
Premium<-5000
Unit_Earn_rate<-0.1 ;  NonUnit_Earn_rate<-0.08
Prem_Fee_rate1<-0.45 ; Prem_Fee_rate2<-0.01
BS_rate<-0.005
Asset_Fee_rate<-0.003
Ini_Expense_rate<-0.45
Maint_Expense<-58*(1+0.20)^(0:9)
#Non-unit Fund fees & Expenses
```  
  
__Step 2: Double Decrement Table__
```{r}
qd<-c(0.00043,0.00042,0.00041,0.00040,0.00041,0.00042,0.00043,0.00045,0.00049,0.00053,NA)
qw<-rep(0.15,11);qw[1:3]<-c(0.25,0.20,0.175);qw[10]<-1;qw[11]<-NA
#Assume withdrawal & death are uniformly distributed within each year.
aq_d<-qd*(1-0.5*qw)
aq_w<-qw*(1-0.5*qd)
#Set al[1] = 100,000, which is (al)_30
#for loop for (al), (ad)d, (ad)w: (from 30~40)
al<-rep(0,11);al[1]<-100000
ad_d<-rep(0,11);ad_w<-rep(0,11)
for(i in 1:10){
  ad_d[i] <- al[i]*aq_d[i]
  ad_w[i] <- al[i]*aq_w[i]
  al[i+1]<-al[i]-ad_d[i]-ad_w[i]
}
ad_d[11]<-NA;ad_w[11]<-NA
#Mortality Info
print("Mortality Table")
M<-matrix(c(30:40,qd,qw,aq_d,aq_w,al,ad_d,ad_w),nrow=11);colnames(M)<-c("Age","qd","qw","aq_d","aq_w","al","ad_d","ad_w");print(M,digits = 5)
```    
  
__Step 3: Unit Fund __  
This includes 
```{r}
########### For an In-force Policy ###########
Inv_Prem<-Premium*(1-c(Prem_Fee_rate1,rep(Prem_Fee_rate2,9)))*(1-BS_rate)
#Value of Units
Value_Units<-c()
Value_Units[1]<-Inv_Prem[1] * (1+Unit_Earn_rate) *  (1-Asset_Fee_rate)
for(i in 2:10){
  Value_Units[i]<-(Value_Units[i-1]+Inv_Prem[i]) * (1+Unit_Earn_rate) *  (1-Asset_Fee_rate)
}
########## Expect Amounts per Initial Policy ##########
EInv_Prem<-Inv_Prem * al[1:10]/al[1]
EValue_Units<-Value_Units * al[2:11]/al[1]
EInterest_Unit<-(c(0,EValue_Units[1:9])+EInv_Prem)*Unit_Earn_rate
Change_EValue_Units<-c(EValue_Units[1],EValue_Units[2:10]-EValue_Units[1:9])
ETransfer_to_NonUnit<-EInv_Prem + EInterest_Unit - Change_EValue_Units

print("Unit Fund Table")
M<-matrix(c(1:10,Inv_Prem,Value_Units,EInv_Prem,EValue_Units,EInterest_Unit,ETransfer_to_NonUnit),nrow=10)
colnames(M)<-c("Year t","Invested Premium","Value of Units","Expected Invested Premium","Expected Value of Units","Expected Interests","Expected Trnsfr to Non-unit");print(M,digits = 5) 
```    
  
__Step 4: Non-Unit Fund __
This includes...
```{r}
########### For an In-force Policy ###########
Prem_Fee<-c(Premium*Prem_Fee_rate1,Premium*rep(Prem_Fee_rate2,9))
BS_Margins<-(Premium-Prem_Fee) * BS_rate
Expenses<-c(Premium*Ini_Expense_rate, rep(0,9)) + Maint_Expense
Death_Surr_Bft<-Value_Units
########## Expect Amounts per Initial Policy ##########
EPrem_Fee<-Prem_Fee * al[1:10]/al[1]
EBS_Margins<-BS_Margins * al[1:10]/al[1]
EExpenses<-Expenses * al[1:10]/al[1]
EInterest_NonUnit<-(EPrem_Fee + EBS_Margins - EExpenses) * NonUnit_Earn_rate
ETransfer_from_Unit<-ETransfer_to_NonUnit
EDeath_Bft<-Death_Surr_Bft * ad_d[1:10]/al[1]
ESurr_Bft<-Death_Surr_Bft * ad_w[1:10]/al[1]
ETransfer<-EPrem_Fee + EBS_Margins - EExpenses + EInterest_NonUnit + ETransfer_from_Unit - EDeath_Bft - ESurr_Bft

print("Non-Unit Fund Table")
M<-matrix(c(1:10,Prem_Fee,BS_Margins,Expenses,Death_Surr_Bft,EPrem_Fee,EBS_Margins,EExpenses,EInterest_NonUnit,ETransfer_from_Unit,EDeath_Bft,ESurr_Bft,ETransfer),nrow=10)
colnames(M)<-c("Year t","Premium-based Fees","Buy-Sell Margins","Expenses","Death/Surr. Bft","Expected Prem-based Fees","Expected BS Margins","Expected Expenses","Expected Interest", "Trnsfr from Unit Fund","Expected Death Bft","Expected Surr Bft","Expected Transfer");print(M,digits = 5) 
```   
  
__(a)__  
Profit signature is shown in the last column of the Non-Unit Fund Table.  
As for the expected present value of transfer (rdr=12.5%):  
```{r}
rdr=0.125
v<-1/(1+rdr)
(NPV<-sum(v^(1:10) * ETransfer))
```  
  
So the expected present value of transfer (rdr = 12.5%) is about __$34.67__.  
__(b)__  
Let Policy Value = Value of Units in the Unit Fund Table. Write a function in r to determine the new 9th policy value such that the last year's expected transfer is zero.
```{r}
Policy_Value<-Value_Units
OBJ<-function(pv_9){
  Policy_Value[9]<-pv_9
  EPolicy_Value<-Policy_Value * al[2:11]/al[1]
  EInterest_Unit<-(c(0,EPolicy_Value[1:9])+EInv_Prem)*Unit_Earn_rate
  Change_EPolicy_Value<-c(EPolicy_Value[1],EPolicy_Value[2:10]-EPolicy_Value[1:9])
  ETransfer_to_NonUnit<-EInv_Prem + EInterest_Unit - Change_EPolicy_Value
  ETransfer_from_Unit<-ETransfer_to_NonUnit
  ETransfer<-EPrem_Fee + EBS_Margins - EExpenses + EInterest_NonUnit + ETransfer_from_Unit - EDeath_Bft - ESurr_Bft
  return(ETransfer[10])
}
NewPV9<-uniroot(OBJ,c(0,1000000))$root #Find NewPV9 such that last transfer is 0
print(changePV9<-NewPV9-Value_Units[9],digits = 4)
```  
The change needed to add on 9th Policy Value is around __$3.713__.  
  
__(c)__  
Decreased. Note that our earn rate is lower than the discounting reate. This means that if we receive profit earlier, our NPV will increase, and vice versa. 
Here we obtained positive change needed for earlier policy value. In other words, we have to earn profit later in order to zeroise the negative transfer in last year. Hence the EPV decreased after zeroisation. Check the result in r: 
```{r}
#Old NPV = $34.67393
#copy the codes from the previous chunk (inside OBJ function)
Policy_Value[9]<-NewPV9
  EPolicy_Value<-Policy_Value * al[2:11]/al[1]
  EInterest_Unit<-(c(0,EPolicy_Value[1:9])+EInv_Prem)*Unit_Earn_rate
  Change_EPolicy_Value<-c(EPolicy_Value[1],EPolicy_Value[2:10]-EPolicy_Value[1:9])
  ETransfer_to_NonUnit<-EInv_Prem + EInterest_Unit - Change_EPolicy_Value
  ETransfer_from_Unit<-ETransfer_to_NonUnit
  ETransfer<-EPrem_Fee + EBS_Margins - EExpenses + EInterest_NonUnit + ETransfer_from_Unit - EDeath_Bft - ESurr_Bft

(NewNPV = sum(v^(1:10) * ETransfer))     #slightly smaller than 34.67393
```  
  
##Question3  
__Step 0: Find Yield on Transfer based on Question2 (a)__  
Re-run the all chuncks before Q2(a) first!
```{r}

Premium<-5000
Unit_Earn_rate<-0.1 ;  NonUnit_Earn_rate<-0.08
Prem_Fee_rate1<-0.45 ; Prem_Fee_rate2<-0.01
BS_rate<-0.005
Asset_Fee_rate<-0.003
Ini_Expense_rate<-0.45
Maint_Expense<-58*(1+0.20)^(0:9)
#Non-unit Fund fees & Expenses
qd<-c(0.00043,0.00042,0.00041,0.00040,0.00041,0.00042,0.00043,0.00045,0.00049,0.00053,NA)
qw<-rep(0.15,11);qw[1:3]<-c(0.25,0.20,0.175);qw[10]<-1;qw[11]<-NA
#Assume withdrawal & death are uniformly distributed within each year.
aq_d<-qd*(1-0.5*qw)
aq_w<-qw*(1-0.5*qd)
#Set al[1] = 100,000, which is (al)_30
#for loop for (al), (ad)d, (ad)w: (from 30~40)
al<-rep(0,11);al[1]<-100000
ad_d<-rep(0,11);ad_w<-rep(0,11)
for(i in 1:10){
  ad_d[i] <- al[i]*aq_d[i]
  ad_w[i] <- al[i]*aq_w[i]
  al[i+1]<-al[i]-ad_d[i]-ad_w[i]
}
ad_d[11]<-NA;ad_w[11]<-NA
########### For an In-force Policy ###########
Inv_Prem<-Premium*(1-c(Prem_Fee_rate1,rep(Prem_Fee_rate2,9)))*(1-BS_rate)
#Value of Units
Value_Units<-c()
Value_Units[1]<-Inv_Prem[1] * (1+Unit_Earn_rate) *  (1-Asset_Fee_rate)
for(i in 2:10){
  Value_Units[i]<-(Value_Units[i-1]+Inv_Prem[i]) * (1+Unit_Earn_rate) *  (1-Asset_Fee_rate)
}
########## Expect Amounts per Initial Policy ##########
EInv_Prem<-Inv_Prem * al[1:10]/al[1]
EValue_Units<-Value_Units * al[2:11]/al[1]
EInterest_Unit<-(c(0,EValue_Units[1:9])+EInv_Prem)*Unit_Earn_rate
Change_EValue_Units<-c(EValue_Units[1],EValue_Units[2:10]-EValue_Units[1:9])
ETransfer_to_NonUnit<-EInv_Prem + EInterest_Unit - Change_EValue_Units

########### For an In-force Policy ###########
Prem_Fee<-c(Premium*Prem_Fee_rate1,Premium*rep(Prem_Fee_rate2,9))
BS_Margins<-(Premium-Prem_Fee) * BS_rate
Expenses<-c(Premium*Ini_Expense_rate, rep(0,9)) + Maint_Expense
Death_Surr_Bft<-Value_Units
########## Expect Amounts per Initial Policy ##########
EPrem_Fee<-Prem_Fee * al[1:10]/al[1]
EBS_Margins<-BS_Margins * al[1:10]/al[1]
EExpenses<-Expenses * al[1:10]/al[1]
EInterest_NonUnit<-(EPrem_Fee + EBS_Margins - EExpenses) * NonUnit_Earn_rate
ETransfer_from_Unit<-ETransfer_to_NonUnit
EDeath_Bft<-Death_Surr_Bft * ad_d[1:10]/al[1]
ESurr_Bft<-Death_Surr_Bft * ad_w[1:10]/al[1]
ETransfer<-EPrem_Fee + EBS_Margins - EExpenses + EInterest_NonUnit + ETransfer_from_Unit - EDeath_Bft - ESurr_Bft



#################### End of Previous code ####################
NPV_func<-function(i){
  v<-1/(1+i)
  NPV<-sum(v^(1:10) * ETransfer)
  return(NPV)
}
(irr<-uniroot(NPV_func,c(0,1))$root)    
```  
The yield on tranfers of Question 2(a) is around __47.38%__.   
   
   
Yearly renewal term insurance is then introduced in the model:    
__Step 1: Revise Input Settings__
```{r}
SumInsured<-20000
mortality_multiplier<-1.20
Maint_Expense<-75*(1+0.25)^(0:9)
```  
__Step 2: Revised the model from Question2 part(a)__
```{r}
Insur_Charges<-SumInsured * qd[1:10] * mortality_multiplier

########## Unit Fund: In-force Policy ##########
#Renew Invested Premium: (Simplified model mention in P.12 of the lecture note.)
Inv_Prem<-Premium*(1-c(Prem_Fee_rate1,rep(Prem_Fee_rate2,9)))*(1-BS_rate)-Insur_Charges
#Renew Value of Units:
Value_Units[1]<-Inv_Prem[1] * (1+Unit_Earn_rate) *  (1-Asset_Fee_rate)
for(i in 2:10){
  Value_Units[i]<-(Value_Units[i-1]+Inv_Prem[i]) * (1+Unit_Earn_rate) *  (1-Asset_Fee_rate)
}
########## Non-Unit Fund: In-force Policy ##########
Insur_Charges<-SumInsured * qd[1:10] * mortality_multiplier
Expenses<-c(Premium*Ini_Expense_rate, rep(0,9)) + Maint_Expense
Death_Bft<-Value_Units + SumInsured
Surr_Bft<-Value_Units


########## Unit Fund: Expect Amounts per Initial Policy ##########
EInv_Prem<-Inv_Prem * al[1:10]/al[1]
EValue_Units<-Value_Units * al[2:11]/al[1]
EInterest_Unit<-(c(0,EValue_Units[1:9])+EInv_Prem)*Unit_Earn_rate
Change_EValue_Units<-c(EValue_Units[1],EValue_Units[2:10]-EValue_Units[1:9])
ETransfer_to_NonUnit<-EInv_Prem + EInterest_Unit - Change_EValue_Units

########## Non-Unit Fund: Expect Amounts per Initial Policy ##########
EInsur_Charges<-Insur_Charges * al[1:10]/al[1]
EExpenses<-Expenses * al[1:10]/al[1]
EInterest_NonUnit<-(EPrem_Fee + EBS_Margins + EInsur_Charges - EExpenses) * NonUnit_Earn_rate
ETransfer_from_Unit<-ETransfer_to_NonUnit
EDeath_Bft<-Death_Bft * ad_d[1:10]/al[1]
ESurr_Bft<-Surr_Bft * ad_w[1:10]/al[1]
ETransfer<-EPrem_Fee + EBS_Margins + EInsur_Charges - EExpenses + EInterest_NonUnit + ETransfer_from_Unit - EDeath_Bft - ESurr_Bft

```  
__Step 3: Calculate the new yield on transfers__  
```{r}
print(ETransfer)
NPV_func<-function(i){
  v<-1/(1+i)
  NPV<-sum(v^(1:10) * ETransfer)
}
(irr<-uniroot(NPV_func,c(-2,2),tol = .Machine$double.eps)$root)   
```  
  
So the new yield on transfers is around __-192.4066%__.  
Compare with the oringal yield 47%. Including an additional term insurance with the charges and expenses charges is unprofitable. 
